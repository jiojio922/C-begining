#include <stdio.h>
//计算调和级数的和
int main() {
    int n, i;
    int a = 1;
    float sum = 0.0;
    while (a == 1) {
    printf("输入n的值：");
    scanf_s("%d", &n);
    for (i = 1;i <= n;i++) {
        sum += 1.0 / i;
    }
    printf("前%d项的和是：%4f\n", n, sum);
    printf("还要继续吗，继续请输入1，否则输入0");
    scanf_s("%d", &a);
    }
    printf("谢谢您的使用！");
    return 0;
}



//遍历1到n的所有偶数
int main() {
    int i=0;
    int n;
    int sum = 0;
    printf("请输入n的值：");
    scanf_s("%d", &n);
    for (i = 2;i <= n;i+=2) {
        printf("%d  ", i);
    }



//更复杂的筛选数字方式
int main() {
    int i, n;
    printf("请输入一个数字：");
    scanf_s("%d", &n);
    for (i = 1;i <= n;i++) {
        if (i % 3 == 0 || i % 7 == 0)
            printf("%d ", i);
    }



//斐波那契数列
    int a, b;
    int n,c,i;
    a = b = 1;
    printf("请输入项数：");
    scanf_s("%d", &n);
    printf("前%d项斐波那契数列为：", n);
    if (n >= 1)
        printf("%d  ", a);
    if (n >= 2)
        printf("%d  ", b);
        for (i = 1;i <= n;i++) {
            c = a + b;
            printf("%d  ",c);
            a = b;
            b = c;
           
        }



//斐波那契数列2:改良了整数溢出问题，同时增加了每5项换行的操作
    long long a = 1, b = 1;  // 用long long存储，范围更大
    long long c;             // 中间变量也需用long long
    int n, i;
    printf("请输入一个数字：");
    scanf_s("%d", &n);
    printf("前%d项斐波那契数列为：\n", n);

    if (n >= 1) {
        printf("%lld  ", a);  // 格式符用%lld匹配long long
    }
    if (n >= 2) {
        printf("%lld  ", b);
    }
    // 从第3项开始计算，直到第n项
    for (i = 3; i <= n; i++) {
        c = a + b;
        printf("%lld  ", c);
        a = b;
        b = c;
        // 每输出5项换行，避免一行太长
        if (i % 5 == 0) {
            printf("\n");
        }
    }




    //求平均值，必须转变思维，我们不能要求让计算机具有人类的思维，即先求和，再求值
    int n,i;
    double num;
    double sum = 0;
    printf("你要输入几个数：");
    scanf_s("%d", &n);
        for (i = 1;i <= n;i++) {
            printf("请输入第%d个数", i);
            scanf_s("%lf", &num);
            sum += num;
    }
        printf("这%d个数的平均数为%lf", n, sum / n);



 
  //打印99乘法表
  int i, j;
  for (i = 1; i <= 9; i++) {
      for (j = 1; j <= i; j++) {
          printf("%d×%d=%d  ", j,i, j * i);
      }
      printf("\n");
  }




//计算sum =a+aa+aaa+aaaa+aaaaa+.......
int main() {
    int a, n,i;
    int term = 0;
    int sum = 0;
    printf("请输入a和n的值： ");
    scanf_s("%d%d", &a, &n);
    for (i = 1;i <= n;i++) {
        term = term * 10 + a;
        sum += term;
    }
    printf("%d", sum);



//关于函数的调用
void calculateArea(double r) {
    double s = 3.14 * r * r;
    printf("圆的面积是：%lf", s);
}
int main() {
    double a;
    printf("请输入圆的半径： ");
    scanf_s("%lf", &a);
    calculateArea(a);




#阶乘（利用递归算法）
int factorial(int n) {
    if (n == 0) 
        return 1;
    
    else 

        return n * factorial(n - 1);   
}
int main() {
    int num = 5;
    printf("%d的阶乘是：%d\n", num, factorial(num));




//寻找数组中的最值
	int lis[5];
	int i, max, min;
	printf("请输入%d个整数：", 5);
	for (i = 0;i <5 ;i++) {
		scanf_s("%d",&lis[i]);
	}
	max = lis[0];
	min = lis[0];
	for (i = 1;i < 5;i++) {
		if (lis[i] > max)
			max = lis[i];
		if (lis[i] < min)
			min = lis[i];
	}
	printf("数组的最大值：%d\n数组的最小值：%d\n", max, min);





//生成一个1-100之间的随机数
#include<stdio.h>
int main(){
	int num = rand() % 100 + 1;
	printf("这次生成了一个1-100的随机数：%d", num);
	return 0;
}




//给一个数开平方（利用sqrt（））
#include <stdio.h>
#include <math.h>  // 别忘了这个,引入新的头文件

int main() {
    double num = 25.0;  // 要开平方的数
    double result = sqrt(num);  // 算平方根

    printf("%lf的平方根是%lf\n", num, result);  // 输出：25.000000的平方根是5.000000
    return 0;
}




//fabs() 函数就像一个 “去符号神器”，专门用来求浮点数的绝对值—— 不管这个数是正数、负数，它都能把前面的 “-” 去掉，只留下数值大小。
#include <stdio.h>
#include <math.h>

int main() {
    double yesterday = -2.5;  // 昨天温度
    double today = 3.0;       // 今天温度
    double diff = fabs(today - yesterday);  // 温差（用绝对值确保结果为正）

    printf("两天的温差是：%lf℃\n", diff);  // 计算：3.0 - (-2.5) = 5.5，绝对值还是5.5 → 输出5.500000℃
    return 0;
}

注意！！！！！！
fabs() 处理浮点数（带小数点的数，比如 3.14、-5.2）；
abs() 处理整数（不带小数点的数，比如 5、-3），它在 <stdlib.h> 头文件里。




//pow( )库函数的使用
#include <stdio.h>
#include <math.h>

int main() {
    double result1 = pow(2, 5);  // 2^5
    double result2 = pow(3, 2);  // 3^2（平方）
    
    printf("2的5次方 = %.0lf\n", result1);  // 输出：32（%.0lf表示不显示小数）
    printf("3的平方 = %.0lf\n", result2);    // 输出：9
    return 0;
}



// auto变量
实际上局部变量都是auto变量
//register变量
将变量放在了寄存器上，使其访问的速度更快



                                                                                                       

